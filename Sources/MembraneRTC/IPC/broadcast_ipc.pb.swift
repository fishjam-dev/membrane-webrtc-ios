// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: broadcast_ipc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct BroadcastMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: BroadcastMessage.OneOf_Type?

    public var notification: BroadcastMessage.Notification {
        get {
            if case let .notification(v)? = type { return v }
            return .started
        }
        set { type = .notification(newValue) }
    }

    public var video: BroadcastMessage.Video {
        get {
            if case let .video(v)? = type { return v }
            return BroadcastMessage.Video()
        }
        set { type = .video(newValue) }
    }

    public var audio: BroadcastMessage.Audio {
        get {
            if case let .audio(v)? = type { return v }
            return BroadcastMessage.Audio()
        }
        set { type = .audio(newValue) }
    }

    public var buffer: Data = .init()

    public var timestamp: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Type: Equatable {
        case notification(BroadcastMessage.Notification)
        case video(BroadcastMessage.Video)
        case audio(BroadcastMessage.Audio)

        #if !swift(>=4.1)
            public static func == (lhs: BroadcastMessage.OneOf_Type, rhs: BroadcastMessage.OneOf_Type) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.notification, .notification): return {
                        guard case let .notification(l) = lhs, case let .notification(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.video, .video): return {
                        guard case let .video(l) = lhs, case let .video(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.audio, .audio): return {
                        guard case let .audio(l) = lhs, case let .audio(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public enum Notification: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case started // = 0
        case finished // = 1
        case paused // = 2
        case resumed // = 3
        case UNRECOGNIZED(Int)

        public init() {
            self = .started
        }

        public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .started
            case 1: self = .finished
            case 2: self = .paused
            case 3: self = .resumed
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        public var rawValue: Int {
            switch self {
            case .started: return 0
            case .finished: return 1
            case .paused: return 2
            case .resumed: return 3
            case let .UNRECOGNIZED(i): return i
            }
        }
    }

    public struct Video {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var format: UInt32 = 0

        public var rotation: UInt32 = 0

        public var width: UInt32 = 0

        public var height: UInt32 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
    }

    public struct Audio {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
    }

    public init() {}
}

#if swift(>=4.2)

    extension BroadcastMessage.Notification: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static var allCases: [BroadcastMessage.Notification] = [
            .started,
            .finished,
            .paused,
            .resumed,
        ]
    }

#endif // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension BroadcastMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "BroadcastMessage"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "notification"),
        2: .same(proto: "video"),
        3: .same(proto: "audio"),
        4: .same(proto: "buffer"),
        5: .same(proto: "timestamp"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: BroadcastMessage.Notification?
                    try decoder.decodeSingularEnumField(value: &v)
                    if let v = v {
                        if self.type != nil { try decoder.handleConflictingOneOf() }
                        self.type = .notification(v)
                    }
                }()
            case 2: try {
                    var v: BroadcastMessage.Video?
                    var hadOneofValue = false
                    if let current = self.type {
                        hadOneofValue = true
                        if case let .video(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.type = .video(v)
                    }
                }()
            case 3: try {
                    var v: BroadcastMessage.Audio?
                    var hadOneofValue = false
                    if let current = self.type {
                        hadOneofValue = true
                        if case let .audio(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.type = .audio(v)
                    }
                }()
            case 4: try decoder.decodeSingularBytesField(value: &buffer)
            case 5: try decoder.decodeSingularInt64Field(value: &timestamp)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch type {
        case .notification?: try {
                guard case let .notification(v)? = self.type else { preconditionFailure() }
                try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
            }()
        case .video?: try {
                guard case let .video(v)? = self.type else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case .audio?: try {
                guard case let .audio(v)? = self.type else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        if !buffer.isEmpty {
            try visitor.visitSingularBytesField(value: buffer, fieldNumber: 4)
        }
        if timestamp != 0 {
            try visitor.visitSingularInt64Field(value: timestamp, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: BroadcastMessage, rhs: BroadcastMessage) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.buffer != rhs.buffer { return false }
        if lhs.timestamp != rhs.timestamp { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension BroadcastMessage.Notification: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "STARTED"),
        1: .same(proto: "FINISHED"),
        2: .same(proto: "PAUSED"),
        3: .same(proto: "RESUMED"),
    ]
}

extension BroadcastMessage.Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = BroadcastMessage.protoMessageName + ".Video"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "format"),
        2: .same(proto: "rotation"),
        3: .same(proto: "width"),
        4: .same(proto: "height"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &format)
            case 2: try decoder.decodeSingularUInt32Field(value: &rotation)
            case 3: try decoder.decodeSingularUInt32Field(value: &width)
            case 4: try decoder.decodeSingularUInt32Field(value: &height)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if format != 0 {
            try visitor.visitSingularUInt32Field(value: format, fieldNumber: 1)
        }
        if rotation != 0 {
            try visitor.visitSingularUInt32Field(value: rotation, fieldNumber: 2)
        }
        if width != 0 {
            try visitor.visitSingularUInt32Field(value: width, fieldNumber: 3)
        }
        if height != 0 {
            try visitor.visitSingularUInt32Field(value: height, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: BroadcastMessage.Video, rhs: BroadcastMessage.Video) -> Bool {
        if lhs.format != rhs.format { return false }
        if lhs.rotation != rhs.rotation { return false }
        if lhs.width != rhs.width { return false }
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension BroadcastMessage.Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = BroadcastMessage.protoMessageName + ".Audio"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: BroadcastMessage.Audio, rhs: BroadcastMessage.Audio) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
