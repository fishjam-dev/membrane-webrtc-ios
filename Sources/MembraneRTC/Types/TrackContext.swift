/// Track's context i.e. all data that can be useful when operating on track.
public class TrackContext {
    public internal(set) var track: RemoteTrack?

    ///Peer this track comes from.
    public let peer: Peer

    /// Track id. It is generated by RTC engine and takes form `peer_id:<random_uuidv4>`.
    public let trackId: String

    ///Any info that was passed in MembraneWebRTC.createVideoTrack/MembraneWebRTC.createAudioTrack
    public internal(set) var metadata: Metadata

    public internal(set) var vadStatus: VadStatus = VadStatus.silence {
        didSet {
            if let listener = self.onVoiceActivityChangedListener {
                listener(self)
            }
        }
    }

    /// Encoding that is currently received. Only present for remote tracks.
    public private(set) var encoding: TrackEncoding? = nil

    /// The reason of currently selected encoding. Only present for remote tracks.
    public private(set) var encodingReason: EncodingReason? = nil

    internal func setEncoding(encoding: TrackEncoding, encodingReason: EncodingReason) {
        self.encoding = encoding
        self.encodingReason = encodingReason
        if let listener = onTrackEncodingChangedListener {
            listener(self)
        }
    }

    init(track: RemoteTrack? = nil, peer: Peer, trackId: String, metadata: Metadata) {
        self.track = track
        self.peer = peer
        self.trackId = trackId
        self.metadata = metadata
    }

    private var onTrackEncodingChangedListener: ((_ trackContext: TrackContext) -> Void)?
    private var onVoiceActivityChangedListener: ((_ trackContext: TrackContext) -> Void)?

    /// Sets listener that is called each time track encoding has changed.
    ///
    /// Track encoding can change in the following cases:
    /// - when user requested a change
    /// - when sender stopped sending some encoding (because of bandwidth change)
    /// - when receiver doesn't have enough bandwidth
    /// Some of those reasons are indicated in TrackContext.encodingReason
    public func setOnEncodingChangedListener(listener: ((_ trackContext: TrackContext) -> Void)?) {
        onTrackEncodingChangedListener = listener
    }

    /// Sets listener that is called every time an update about voice activity is received from the server.
    public func setOnVoiceActivityChangedListener(listener: ((_ trackContext: TrackContext) -> Void)?) {
        onVoiceActivityChangedListener = listener
    }
}
